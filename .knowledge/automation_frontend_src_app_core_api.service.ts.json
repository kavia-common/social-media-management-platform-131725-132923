{"is_source_file": true, "format": "TypeScript", "description": "This file defines an Angular service class ApiService that provides typed methods for interacting with a backend REST API related to authentication, social accounts, scheduling, posting, analytics, and automation rules. It incorporates environment variables, HTTP requests, and error handling. The class is marked as injectable for dependency injection.", "external_files": ["../../environments/environment", "./models", "@angular/core", "@angular/common/http", "rxjs"], "external_methods": ["HttpClient.post", "HttpClient.get", "HttpClient.delete", "HttpClient.patch", "catchError", "throwError"], "published": ["ApiService"], "classes": [{"name": "ApiService", "description": "An Angular service class providing methods for API interactions with authentication, social media accounts, scheduling, posting, analytics, and automation rules."}], "methods": [{"name": "headers", "description": "Getter for constructing HTTP headers, including Authorization token if available."}, {"name": "login", "description": "Sends login request with email and password, returns ApiResponse containing AuthToken."}, {"name": "register", "description": "Sends registration request with user info, returns ApiResponse with User data."}, {"name": "me", "description": "Retrieves current authenticated user information."}, {"name": "listSocialAccounts", "description": "Lists connected social accounts."}, {"name": "connectSocialAccount", "description": "Initiates social account connection flow for a specified platform."}, {"name": "disconnectSocialAccount", "description": "Disconnects a social account by ID."}, {"name": "schedulePost", "description": "Schedules a new post with provided payload."}, {"name": "listScheduled", "description": "Lists scheduled posts."}, {"name": "updateScheduled", "description": "Updates a scheduled post by ID."}, {"name": "cancelScheduled", "description": "Cancels a scheduled post by ID."}, {"name": "listPosted", "description": "Lists posted items."}, {"name": "getKpis", "description": "Retrieves analytics KPIs."}, {"name": "getSeries", "description": "Retrieves analytics series data."}, {"name": "listRules", "description": "Lists automation rules."}, {"name": "createRule", "description": "Creates a new automation rule."}, {"name": "updateRule", "description": "Updates an existing automation rule by ID."}, {"name": "deleteRule", "description": "Deletes an automation rule by ID."}, {"name": "handle", "description": "Handles HTTP errors and transforms them into thrown errors."}], "calls": ["HttpClient.post", "HttpClient.get", "HttpClient.delete", "HttpClient.patch", "catchError", "throwError"], "search-terms": ["ApiService", "auth", "social accounts", "schedule", "posts", "analytics", "rules", "environment.API_BASE_URL", "HttpClient", "Angular"], "state": 2, "file_id": 24, "knowledge_revision": 95, "git_revision": "", "revision_history": [{"50": ""}, {"84": ""}, {"90": ""}, {"95": ""}], "ctags": [{"_type": "tag", "name": "ApiService", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^export class ApiService {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "g", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^    const g = typeof globalThis !== 'undefined' ? (globalThis as any) : undefined;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "g", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^    const ls: any = g && g.localStorage ? g.localStorage : undefined;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "headers", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^    let headers = new HttpHeaders({ 'Content-Type': 'application\\/json' });$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "http", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^  private http = inject(HttpClient);$/", "language": "TypeScript", "kind": "property", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "ls", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^    const ls: any = g && g.localStorage ? g.localStorage : undefined;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "ls", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^    const token = ls ? ls.getItem('access_token') : null;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^    const message = (error.error && (error.error.message || error.error.detail)) || error.messag/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/social-media-management-platform-131725-132923/automation_frontend/src/app/core/api.service.ts", "pattern": "/^    const token = ls ? ls.getItem('access_token') : null;$/", "language": "TypeScript", "kind": "constant"}], "hash": "a6c680c73b31d9523577faba7e82f846", "format-version": 4, "code-base-name": "automation_frontend", "filename": "automation_frontend/src/app/core/api.service.ts", "fields": [{"name": "let headers = new HttpHeaders({ 'Content-Type': 'application\\/json' });", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "private http = inject(HttpClient);", "scope": "ApiService", "scopeKind": "class", "description": "unavailable"}]}